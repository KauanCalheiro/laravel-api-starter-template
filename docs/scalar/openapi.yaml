openapi: 3.0.0
info:
  title: API
  version: 1.0.0
  description: ''
servers:
  - url: 'http://localhost:8000/api/v1'
paths:
  /auth/login:
    parameters: []
    post:
      summary: Login
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
            example:
              email: admin@example.com
              password: admin
  /auth/logout:
    parameters: []
    post:
      summary: Logout
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
  /auth/register:
    parameters: []
    post:
      summary: Register
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                password_confirmation:
                  type: string
            example:
              name: Teste
              email: teste@teste.gmail.com
              password: teste123
              password_confirmation: teste123
  /auth/active-role:
    parameters: []
    post:
      summary: Set User Active Role
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
            example:
              role: admin
  /auth/user:
    parameters: []
    get:
      summary: Get Authenticated User
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
  /user/1/roles/assign:
    parameters: []
    post:
      summary: Assign
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items:
                    type: string
            example:
              roles:
                - admin
                - user
  /user/1/roles/revoke:
    parameters: []
    post:
      summary: Revoke
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items:
                    type: string
            example:
              roles:
                - admin
  /user/1/roles/sync:
    parameters: []
    post:
      summary: Sync
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items:
                    type: string
            example:
              roles:
                - admin
                - user
  /user:
    parameters: []
    post:
      summary: Create User
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                password_confirmation:
                  type: string
            example:
              name: Teste 1
              email: teste@teste1.gmail.com
              password: teste123
              password_confirmation: teste123
    get:
      summary: Get All Users
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
  /user/1:
    parameters: []
    get:
      summary: Get User by ID
      parameters:
        - name: include
          in: query
          required: false
          example: roles
          schema:
            type: string
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
  /user/2:
    parameters: []
    put:
      summary: Update User
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
            example:
              name: Teste 1 Edit
              email: teste@teste1.gmail.com
    delete:
      summary: Delete User
      parameters:
        - name: Accept
          in: header
          required: false
          example: application/json
          schema:
            type: string
      responses: {}
